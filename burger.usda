#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.6386840770324648, 0.6386840770324658, 0.6386841811293575)
                double3 target = (-3.9780384097909405e-8, -3.978038287666408e-8, 7.956076830684111e-8)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            int "rtx:externalFrameCounter" = 162766
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def PhysicsScene "PhysicsScene"
    {
        vector3f physics:gravityDirection = (0, 0, -1)
        float physics:gravityMagnitude = 9.8
    }

    over "turtlebot3_burger" (
        prepend references = @../../ros2_workspace/turtlebot3/turtlebot3_description/urdf/turtlebot3_burger/turtlebot3_burger.usd@
    )
    {
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0.06232999265193939)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "base_link"
        {
            over "wheel_left_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }

            over "wheel_right_joint"
            {
                float state:angular:physics:position = 0
                float state:angular:physics:velocity = 0
            }
        }

        over "base_footprint"
        {
        }

        over "caster_back_link"
        {
        }

        over "imu_link"
        {
        }

        over "base_scan"
        {
        }

        over "wheel_left_link"
        {
        }

        over "wheel_right_link"
        {
        }
    }

    def OmniGraph "ActionGraph"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 5)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "on_playback_tick" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 1
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-1006.19867, 85.96977)
        }

        def OmniGraphNode "ros2_context" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uchar inputs:domain_id = 42
            custom bool inputs:useDomainIDEnvVar = 1
            token node:type = "omni.isaac.ros2_bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context = 0
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-994.701, 375.5135)
        }

        def OmniGraphNode "ros2_subscribe_twist" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom uint64 inputs:context = 0
            prepend uint64 inputs:context.connect = </World/ActionGraph/ros2_context.outputs:context>
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom string inputs:nodeNamespace = ""
            custom uint64 inputs:queueSize = 10
            custom string inputs:topicName = "cmd_vel"
            token node:type = "omni.isaac.ros2_bridge.ROS2SubscribeTwist"
            int node:typeVersion = 1
            custom vector3d outputs:angularVelocity = (0, 0, 0)
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom vector3d outputs:linearVelocity = (0, 0, 0)
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-738.49774, 373.18317)
        }

        def OmniGraphNode "scale_to_from_stage_units" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:conversion = "Convert to stage units" (
                allowedTokens = ["Convert to stage units", "Convert to meters"]
            )
            custom token inputs:value
            prepend token inputs:value.connect = </World/ActionGraph/ros2_subscribe_twist.outputs:linearVelocity>
            token node:type = "omni.isaac.core_nodes.OgnIsaacScaleToFromStageUnit"
            int node:typeVersion = 1
            custom token outputs:result
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-487.5842, 596.3768)
        }

        def OmniGraphNode "break_3_vector" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </World/ActionGraph/ros2_subscribe_twist.outputs:angularVelocity>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-254.67175, 498.53052)
        }

        def OmniGraphNode "constant_token" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "wheel_left_joint"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-332.33615, 154.14868)
        }

        def OmniGraphNode "make_array" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom int inputs:arraySize = 2
            custom token inputs:arrayType = "token[]" (
                allowedTokens = ["auto", "bool[]", "double[]", "float[]", "half[]", "int[]", "int64[]", "token[]", "uchar[]", "uint[]", "uint64[]", "double[2][]", "double[3][]", "double[4][]", "matrixd[3][]", "matrixd[4][]", "float[2][]", "float[3][]", "float[4][]", "half[2][]", "half[3][]", "half[4][]", "int[2][]", "int[3][]", "int[4][]"]
            )
            custom token inputs:input0
            prepend token inputs:input0.connect = </World/ActionGraph/constant_token.inputs:value>
            custom token inputs:input1 (
                customData = {
                    string ExtendedAttributeType = "Any"
                    dictionary omni = {
                        dictionary graph = {
                            string attrType = "Any"
                        }
                    }
                }
            )
            prepend token inputs:input1.connect = </World/ActionGraph/constant_token_01.inputs:value>
            token node:type = "omni.graph.nodes.ConstructArray"
            int node:typeVersion = 1
            custom token outputs:array
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-54.083427, 192.71062)
        }

        def OmniGraphNode "differential_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double inputs:angularVelocity = 0
            prepend double inputs:angularVelocity.connect = </World/ActionGraph/break_3_vector.outputs:z>
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/ros2_subscribe_twist.outputs:execOut>
            custom double inputs:linearVelocity = 0
            prepend double inputs:linearVelocity.connect = </World/ActionGraph/break_3_vector_01.outputs:x>
            custom double inputs:maxAngularSpeed = 0
            custom double inputs:maxLinearSpeed = 0.22
            custom double inputs:maxWheelSpeed = 0
            custom double inputs:wheelDistance = 0.16
            custom double inputs:wheelRadius = 0.025
            token node:type = "omni.isaac.wheeled_robots.DifferentialController"
            int node:typeVersion = 1
            custom double[] outputs:effortCommand
            custom double[] outputs:positionCommand
            custom double[] outputs:velocityCommand
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-10.578072, 428.15857)
        }

        def OmniGraphNode "articulation_controller" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom double[] inputs:effortCommand = []
            custom uint inputs:execIn
            prepend uint inputs:execIn.connect = </World/ActionGraph/on_playback_tick.outputs:tick>
            custom int[] inputs:jointIndices = []
            custom token[] inputs:jointNames = []
            prepend token[] inputs:jointNames.connect = </World/ActionGraph/make_array.outputs:array>
            custom double[] inputs:positionCommand = []
            custom string inputs:robotPath = ""
            custom rel inputs:targetPrim
            prepend rel inputs:targetPrim = </World/turtlebot3_burger>
            custom bool inputs:usePath = 0
            custom double[] inputs:velocityCommand = []
            prepend double[] inputs:velocityCommand.connect = </World/ActionGraph/differential_controller.outputs:velocityCommand>
            token node:type = "omni.isaac.core_nodes.IsaacArticulationController"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (272.0107, 273.05176)
        }

        def OmniGraphNode "break_3_vector_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:tuple
            prepend token inputs:tuple.connect = </World/ActionGraph/scale_to_from_stage_units.outputs:result>
            token node:type = "omni.graph.nodes.BreakVector3"
            int node:typeVersion = 1
            custom token outputs:x
            custom token outputs:y
            custom token outputs:z
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-244.94295, 651.7672)
        }

        def OmniGraphNode "constant_token_01" (
            prepend apiSchemas = ["NodeGraphNodeAPI"]
        )
        {
            custom token inputs:value = "wheel_right_joint"
            token node:type = "omni.graph.nodes.ConstantToken"
            int node:typeVersion = 1
            uniform token ui:nodegraph:node:expansionState = "open"
            uniform float2 ui:nodegraph:node:pos = (-316.16626, 287.69662)
        }
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def PhysicsScene "physicsScene"
{
}

